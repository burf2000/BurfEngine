// OLD
    private Model box;
    private Model floor;
            box.dispose();
            floor.dispose();

//    public void hitSomething(int screenX, int screenY) {
//        Ray pickRay = camera.getPickRay(screenX, screenY);
//
//        // A bounding box for each of your minecraft blocks
//        BoundingBox boundingBox = new BoundingBox();
//        Vector3 intersection = new Vector3();
//        if (Intersector.intersectRayBounds(pickRay, boundingBox, intersection)) {
//            // The ray has hit the box, intersection is the point it hit
//            Gdx.app.log("MyTag", "my informative message");
//        } else {
//            // Not hit
//            Gdx.app.log("MyTag", "my informative message2");
//        }
//    }

//    public void hitSomething(int screenX, int screenY) {
//        // If you are only using a camera
//        Ray pickRay = camera.getPickRay(screenX, screenY);
////        // If your camera is managed by a viewport
//        //Ray pickRay = stage.getViewport().getPickRay(screenX, screenY);
//
//        // we want to check a collision only on a certain plane, in this case the X/Z plane
//        Plane plane = new Plane(new Vector3(0, -1, 0), -1);
//        Vector3 intersection = new Vector3();
//
//        Intersector.intersectRayPlane(pickRay, plane, intersection);
//
//        int x = (int)intersection.x;
//        int z = (int)intersection.z;
//
//        Gdx.app.log("MyTag", "x " + x  + " z "+ z);
//
//    }

//    public void cubes()
//    {
//        // A ModelBatch is like a SpriteBatch, just for models.  Use it to batch up geometry for OpenGL
//        modelBatch = new ModelBatch();
//
//        // A ModelBuilder can be used to build meshes by hand
//        ModelBuilder modelBuilder = new ModelBuilder();
//
//        // It also has the handy ability to make certain premade shapes, like a Cube
//        // We pass in a ColorAttribute, making our cubes diffuse ( aka, color ) red.
//        // And let openGL know we are interested in the Position and Normal channels
//        box = modelBuilder.createBox(1f, 1f, 1f,
//                new Material(ColorAttribute.createDiffuse(Color.BLUE)),
//                VertexAttributes.Usage.Position | VertexAttributes.Usage.Normal | VertexAttributes.Usage.TextureCoordinates
//        );
//
//        // A model holds all of the information about an, um, model, such as vertex data and texture info
//        // However, you need an instance to actually render it.  The instance contains all the
//        // positioning information ( and more ).  Remember Model==heavy ModelInstance==Light
//
//        int c = 40;
//        for (int x = 0; x < c; x ++ ) {
//
//            for (int y = 0; y < c; y ++ ) {
//
//                for (int z = 0; z < c; z ++ ) {
//
//                    GameObject m = new GameObject(box,new Vector3(x + 2,y,z), true);
//                    boxInstance.add(m);
//                }
//
//            }
//
//        }
//
//        Material matWhite = new Material(ColorAttribute.createDiffuse(Color.WHITE));
//
//        float size = 10;
//        modelBuilder.begin();
//        MeshPartBuilder tileBuilder;
//        tileBuilder = modelBuilder.part("top", GL20.GL_TRIANGLES, VertexAttributes.Usage.Position | VertexAttributes.Usage.Normal | VertexAttributes.Usage.TextureCoordinates, matWhite);
//        tileBuilder.rect(-size, 0.1f, size,   size, 0.1f, size,    size, 0.1f, -size,  -size, 0.1f, -size,  0f, 1f, 0f);
//        floor = modelBuilder.end();
//
//        GameObject m = new GameObject(floor, new Vector3(0,-1,0), false);
//        boxInstance.add(m);
//    }



/        if (direction.z < 0)
//        {
//            //Gdx.app.log("MyTag 2", "Fire A");
//            if (direction.x < -0.5)
//            {
//                //Gdx.app.log("MyTag 2", "Fire 1");
//
////                markAddChunk(x - 2, z);
////                markAddChunk(x - 2, z - 1);
////                markAddChunk(x - 2, z + 1);
//
//                markAddChunk(x - 1, z);
//                markAddChunk(x - 1, z - 1);
//                markAddChunk(x - 1, z + 1);
//
//                markAddChunk(x, z - 1);
//                markAddChunk(x , z + 1);
//            }
//            else if  (direction.x > 0.5)
//            {
//
//                //Gdx.app.log("MyTag 2", "Fire 2");
//
////                markAddChunk(x + 2, z);
////                markAddChunk(x + 2, z - 1);
////                markAddChunk(x + 2, z + 1);
//
//                markAddChunk(x + 1, z);
//                markAddChunk(x + 1, z - 1);
//                markAddChunk(x + 1, z + 1);
//
//                markAddChunk(x, z - 1);
//                markAddChunk(x , z + 1);
//
//            }
//            else
//            {
//
//                //Gdx.app.log("MyTag 2", "Fire 3");
////                markAddChunk(x, z - 2);
////                markAddChunk(x - 1, z - 2);
////                markAddChunk(x + 1, z - 2);
//
//                markAddChunk(x, z - 1);
//                markAddChunk(x - 1, z - 1);
//                markAddChunk(x + 1, z - 1);
//
//                markAddChunk(x - 1, z );
//                markAddChunk(x + 1, z );
//            }
//
//        }
//        else
//        {
//            //Gdx.app.log("MyTag 2", "Fire B");
//
//            if (direction.x < -0.5)
//            {
//
//                //Gdx.app.log("MyTag 2", "Fire 2");
////                markAddChunk(x - 2, z);
////                markAddChunk(x - 2, z - 1);
////                markAddChunk(x - 2, z + 1);
//
//                markAddChunk(x - 1, z);
//                markAddChunk(x - 1, z - 1);
//                markAddChunk(x - 1, z + 1);
//
//                markAddChunk(x, z - 1);
//                markAddChunk(x , z + 1);
//            }
//            else if (direction.x > 0.5)
//            {
//
//                //Gdx.app.log("MyTag 2", "Fire 3");
////                markAddChunk(x + 2,z);
////                markAddChunk(x + 2, z - 1);
////                markAddChunk(x + 2, z + 1);
//
//                markAddChunk(x + 1,z);
//                markAddChunk(x + 1, z - 1);
//                markAddChunk(x + 1, z + 1);
//
//                markAddChunk(x, z - 1);
//                markAddChunk(x , z + 1);
//            }
//            else
//            {
//
//                //Gdx.app.log("MyTag 2", "Fire 4");
////                markAddChunk(x,z + 2);
////                markAddChunk(x - 1, z + 2);
////                markAddChunk(x + 1, z + 2);
//
//                markAddChunk(x,z + 1);
//                markAddChunk(x - 1, z + 1);
//                markAddChunk(x + 1, z + 1);
//
//                markAddChunk(x - 1, z );
//                markAddChunk(x + 1, z );
//            }
//        }